package com.rsi.agp.core.executor.gan;
// Generated by T-Systems


import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Locale;

import javax.xml.stream.FactoryConfigurationError;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;

import org.xml.sax.SAXException;

import com.rsi.agp.core.executor.GenericXMLParser;
import com.rsi.agp.core.webapp.util.StringUtils;
/* ESC-3587 ** MODIF TAM (16.01.2019) ** Inicio */
//import com.rsi.agp.dao.tables.cgen.TipoCapital;
import com.rsi.agp.dao.tables.cgen.TipoCapitalConGrupoNegocio;

import com.rsi.agp.dao.tables.cgen.TipoSubvencionEnesa;
import com.rsi.agp.dao.tables.commons.Termino;
import com.rsi.agp.dao.tables.commons.TerminoId;
import com.rsi.agp.dao.tables.cpl.Modulo;
import com.rsi.agp.dao.tables.cpl.ModuloId;
import com.rsi.agp.dao.tables.cpl.gan.Especie;
import com.rsi.agp.dao.tables.cpl.gan.EspecieId;
import com.rsi.agp.dao.tables.cpl.gan.GruposRazas;
import com.rsi.agp.dao.tables.cpl.gan.GruposRazasId;
import com.rsi.agp.dao.tables.cpl.gan.RegimenManejo;
import com.rsi.agp.dao.tables.cpl.gan.RegimenManejoId;
import com.rsi.agp.dao.tables.cpl.gan.SubvencionEnesaGanado;
import com.rsi.agp.dao.tables.cpl.gan.SubvencionEnesaGanadoId;
import com.rsi.agp.dao.tables.cpl.gan.TiposAnimalGanado;
import com.rsi.agp.dao.tables.cpl.gan.TiposAnimalGanadoId;

/**
 * Parser tabla 0435: Subvenciones ENESA
 * @author U029823
 *
 */
public class SubvencionEnesaGanadoXMLParser extends GenericXMLParser {
	
	public static void main(String[] args){
		
		//TEMPORAL
//		args = new String[4];
//		args[0] = "D:\\borrar\\SubvencionesEnesa.xml";
//		args[1] = "D:\\borrar\\SubvencionesEnesa.csv";
//		args[2] = "181";
//		args[3] = GenericXMLParser.formatoOrigen;
		//FIN TEMPORAL
		
		if (args.length != 4) {
			System.out.println("Usage: java " + SubvencionEnesaGanadoXMLParser.class.getName()
					+ " <XML that needs to be transformed>" + " <Output file>" + " <LineaseguroId>" + " <dateFormat>");
			System.exit(1);
		}
		try {
			SubvencionEnesaGanadoXMLParser parser = new SubvencionEnesaGanadoXMLParser();
			parser.setTagPrincipal(GenericXMLParser.TAG_RG);
			parser.procesarFichero(args[0], args[1], new Long(args[2]), args[3]);
		} catch (FileNotFoundException e) {
			System.out.println("Error al buscar el fichero el fichero de subvenciones ENESA " + e.getMessage());
			e.printStackTrace();
			System.exit(2);
		} catch (SAXException e) {
			System.out.println("Error al crear el XMLReader " + e.getMessage());
			e.printStackTrace();
			System.exit(3);
		} catch (IOException e) {
			System.out.println("Error de entrada/salida al parsear el fichero de subvenciones ENESA " + e.getMessage());
			e.printStackTrace();
			System.exit(4);
		} catch (XMLStreamException e) {
			System.out.println("Error al parsear el XML: " + e.getMessage());
			e.printStackTrace();
			System.exit(5);
		} catch (FactoryConfigurationError e) {
			System.out.println("Error al crear el parseador XML: " + e.getMessage());
			e.printStackTrace();
			System.exit(6);
		} catch (Exception e) {
			System.out.println("Error indefinido al parsear el XML: " + e.getMessage());
			e.printStackTrace();
			System.exit(7);
		}
	}
	
	@Override
	protected String generaInsert(Object reg, String dateFormat) {
		SimpleDateFormat sdf = new SimpleDateFormat(dateFormat, Locale.US);
		SubvencionEnesaGanado registro = (SubvencionEnesaGanado)reg;
		String sql = "";
		sql += StringUtils.nullToString(registro.getId().getId()) + ";";
		sql += registro.getId().getLineaseguroid() + ";";
		
		if (registro.getFecEntVigorHasta() != null){
			sql += sdf.format(registro.getFecEntVigorHasta()) + ";";
		}else{
			sql += ";";
		}
		
		sql += StringUtils.nullToString(registro.getModulo().getId().getCodmodulo()) + ";";
		sql += StringUtils.nullToString(registro.getTipoCapital().getCodtipocapital()) + ";";
		sql += StringUtils.nullToString(registro.getEspecie().getId().getCodespecie()) + ";";
		sql += StringUtils.nullToString(registro.getRegimenManejo().getId().getCodRegimen()) + ";";
		sql += StringUtils.nullToString(registro.getGruposRazas().getId().getCodGrupoRaza()) + ";";
		sql += StringUtils.nullToString(registro.getCodConceptoPpal()) + ";";
		sql += StringUtils.nullToString(registro.getCodRiesgoCbto()) + ";";
		sql += StringUtils.nullToString(registro.getTermino().getId().getCodprovincia()) + ";";
		sql += StringUtils.nullToString(registro.getTermino().getId().getCodcomarca()) + ";";
		sql += StringUtils.nullToString(registro.getTermino().getId().getCodtermino()) + ";";
		sql += StringUtils.nullToString(registro.getTermino().getId().getSubtermino()) + ";";
		sql += StringUtils.nullToString(registro.getTipoSubvencionEnesa().getCodtiposubvenesa()) + ";";
		
		if(registro.getRatio()!=null){
			sql += StringUtils.nullToString(registro.getRatio()) + ";";
		}else{
			sql += ";";
		}
		
		if(registro.getCodBaseCalculo()!=null){
			sql += StringUtils.nullToString(registro.getCodBaseCalculo()) + ";";
		}else{
			sql += ";";	
		}
		
		if(registro.getDatoAsocBaseCalculo()!=null){
			sql += StringUtils.nullToString(registro.getDatoAsocBaseCalculo()) + ";";
		}else{
			sql += ";";	
		}
		
		if(registro.getPorcSubvSeguroInd()!=null){
			sql += StringUtils.nullToString(registro.getPorcSubvSeguroInd()) + ";";
		}else{
			sql += ";";	
		}
		
		if(registro.getPorcSubvSeguroCol()!=null){
			sql += StringUtils.nullToString(registro.getPorcSubvSeguroCol()) + ";";
		}else{
			sql += ";";	
		}

		if(registro.getValorUnitario()!=null){
			sql += StringUtils.nullToString(registro.getValorUnitario()) + ";";
		}else{
			sql += ";";	
		}
		
		if(registro.getTipoAnimal()!=null && registro.getTipoAnimal().getId()!=null && 
				registro.getTipoAnimal().getId().getCodTipoAnimal()!=null){
			sql += StringUtils.nullToString(registro.getTipoAnimal().getId().getCodTipoAnimal()) + ";";
		}else{
			sql += ";";	
		}
		
		/* P79408 RQ.01 Inicio */
		if (registro.getFechaDesde() != null){
			sql += sdf.format(registro.getFechaDesde()) + ";";
		}
		else{
			sql += ";";
		}
		
		if (registro.getFechaHasta() != null){
			sql += sdf.format(registro.getFechaHasta()) + ";";
		}
		else{
			sql += ";";
		}
		/* P79408 RQ.01 Fin */
		
		return sql;
	}

	@Override
	protected Object generaRegistro(Object actual, String tag, XMLStreamReader parser, int id, Long lineaseguroid) {
		SimpleDateFormat sdf2 = new SimpleDateFormat(GenericXMLParser.FORMATO_ORIGEN);
		SubvencionEnesaGanado registro;
		SubvencionEnesaGanadoId idActual;
		if (actual == null){
			registro = new SubvencionEnesaGanado();
			idActual = new SubvencionEnesaGanadoId();
			idActual.setLineaseguroid(lineaseguroid);
			idActual.setId(new Long(id));
			
			Termino termino = new Termino();
		    TerminoId terminoId = new TerminoId();
		    termino.setId(terminoId);
		    
		    registro.setTermino(termino);
		    
			registro.setId(idActual);
		}
		else{
			registro = (SubvencionEnesaGanado) actual;
		}
		
		if (this.getTagPrincipal().equals(tag)){
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "fecEntVigH")).equals("")){
				try {
					registro.setFecEntVigorHasta(sdf2.parse(parser.getAttributeValue(null, "fecEntVigH")));
				} catch (ParseException e) {
					//idActual.setFecEntVigorHasta(null);
				}
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "mod")).equals("")){
				Modulo modulo = new Modulo();
				ModuloId moduloId = new ModuloId();
				String codModulo = StringUtils.nullToString(parser.getAttributeValue(null, "mod")).trim();
				moduloId.setCodmodulo(codModulo);
				moduloId.setLineaseguroid(lineaseguroid);
				modulo.setId(moduloId);
				registro.setModulo(modulo);
			}
			
			/* ESC-3587 ** MODIF TAM (16.01.2019) ** Inicio */
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "tipCptal")).equals("")){
				//TipoCapital tipoCapital = new TipoCapital();
				TipoCapitalConGrupoNegocio tipoCapital = new TipoCapitalConGrupoNegocio();
				//BigDecimal codTipoCapital = new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "tipCptal")));
				Long codTipoCapital = new Long(StringUtils.nullToString(parser.getAttributeValue(null, "tipCptal")));
				tipoCapital.setCodtipocapital(codTipoCapital);
				registro.setTipoCapital(tipoCapital);
			}
			/* ESC-3587 ** MODIF TAM (16.01.2019) ** Fin */
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "esp")).equals("")){
				Especie especie = new Especie();
				EspecieId especieId = new EspecieId();
				Long idEspecie = new Long(StringUtils.nullToString(parser.getAttributeValue(null, "esp")));
				especieId.setCodespecie(idEspecie);
				especie.setId(especieId);
				registro.setEspecie(especie);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "reg")).equals("")){
				RegimenManejo regimenManejo = new RegimenManejo();
				RegimenManejoId idRegimenManejo = new RegimenManejoId();
				Long codRegimenManejo = new Long(StringUtils.nullToString(parser.getAttributeValue(null, "reg")));
				idRegimenManejo.setCodRegimen(codRegimenManejo);
				regimenManejo.setId(idRegimenManejo);
				registro.setRegimenManejo(regimenManejo);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "grupRaza")).equals("")){
				GruposRazas gruposRazas = new GruposRazas();
				GruposRazasId gruposRazasId = new GruposRazasId();
				Long codGruposRazas = new Long(StringUtils.nullToString(parser.getAttributeValue(null, "grupRaza")));
				gruposRazasId.setCodGrupoRaza(codGruposRazas);
				gruposRazas.setId(gruposRazasId);
				registro.setGruposRazas(gruposRazas);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "cPMod")).equals("")){
				registro.setCodConceptoPpal(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "cPMod"))));
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "codRCub")).equals("")){
				registro.setCodRiesgoCbto(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "codRCub"))));
			}

			if (!StringUtils.nullToString(parser.getAttributeValue(null, "prov").trim()).equals("")){
				BigDecimal codProvincia = new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "prov")));
				registro.getTermino().getId().setCodprovincia(codProvincia);
			}

			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "com")).equals("")){
				BigDecimal codComarca = new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "com")));
				registro.getTermino().getId().setCodcomarca(codComarca);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "term")).equals("")){
				BigDecimal codTermino = new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "term")));
				registro.getTermino().getId().setCodtermino(codTermino);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "sterm")).equals("")){
				Character subtermino = new Character(StringUtils.nullToString(parser.getAttributeValue(null, "sterm").trim()).charAt(0));
				registro.getTermino().getId().setSubtermino(subtermino);
			}
			
			//tipSubv
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "tipSubv")).equals("")){
				TipoSubvencionEnesa tipoSubvencion = new TipoSubvencionEnesa();
				BigDecimal codTipoSubvencion = new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "tipSubv")));
				tipoSubvencion.setCodtiposubvenesa(codTipoSubvencion);
				registro.setTipoSubvencionEnesa(tipoSubvencion);
			}
			
			//ratio
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "ratio")).equals("")){
				registro.setRatio(new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "ratio"))));
			}
			
			//codBasCal
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "codBasCal")).equals("")){
				registro.setCodBaseCalculo(StringUtils.nullToString(parser.getAttributeValue(null, "codBasCal").trim()).charAt(0));
			}
			
			//datAsoBasCal
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "datAsoBasCal")).equals("")){
				registro.setDatoAsocBaseCalculo(new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "datAsoBasCal"))));
			}
			
			//subvSegInd
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "subvSegInd")).equals("")){
				registro.setPorcSubvSeguroInd(new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "subvSegInd"))));
			}

			//subvSegCol
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "subvSegCol")).equals("")){
				registro.setPorcSubvSeguroCol(new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "subvSegCol"))));
			}
			
			//valUnit
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "valUnit")).equals("")){
				registro.setValorUnitario(new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "valUnit"))));
			}
			
			//tipAnim
			TiposAnimalGanado tipoAnimal= new TiposAnimalGanado();
			TiposAnimalGanadoId tipoAnimalId= new TiposAnimalGanadoId();
			Long codTipoAnimal;
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "tipAnim")).equals("")){
				
				codTipoAnimal = new Long(StringUtils.nullToString(parser.getAttributeValue(null, "tipAnim")));
				
			}else{
				codTipoAnimal = new Long(999);
				
				
			}
			tipoAnimalId.setCodTipoAnimal(codTipoAnimal);
			tipoAnimal.setId(tipoAnimalId);
			registro.setTipoAnimal(tipoAnimal);	
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "fechaDesde")).equals("")){
				try {
					registro.setFechaDesde(sdf2.parse(parser.getAttributeValue(null, "fechaDesde")));
				} catch (ParseException e) {
					registro.setFechaDesde(null);
				}
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "fechaHasta")).equals("")){
				try {
					registro.setFechaHasta(sdf2.parse(parser.getAttributeValue(null, "fechaHasta")));
				} catch (ParseException e) {
					registro.setFechaHasta(null);
				}
			}
		}

		return registro;
	}
}
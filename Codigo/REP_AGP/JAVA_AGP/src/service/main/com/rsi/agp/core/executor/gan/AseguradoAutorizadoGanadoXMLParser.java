package com.rsi.agp.core.executor.gan;
// Generated by T-Systems

import java.io.FileNotFoundException;
import java.io.IOException;

import javax.xml.stream.FactoryConfigurationError;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;

import org.xml.sax.SAXException;

import com.rsi.agp.core.executor.GenericXMLParser;
import com.rsi.agp.core.webapp.util.StringUtils;
import com.rsi.agp.dao.tables.cpl.gan.AseguradoAutorizadoGanado;
import com.rsi.agp.dao.tables.cpl.gan.AseguradoAutorizadoGanadoId;



/**
 * Parser tabla 0425: Asegurados con Autorización a la Contratación Ganado
 * @author U029823
 *
 */
public class AseguradoAutorizadoGanadoXMLParser extends GenericXMLParser {
	
	public static void main(String[] args){
		
		//TEMPORAL
//		args = new String[4];
//		args[0] = "C:\\...\\AseguradosAutorizacionContratacionGanado.xml";
//		args[1] = "C:\\...\\AseguradosAutorizacionContratacionGanado.csv";
//		args[2] = "425";
//		args[3] = "null";
		//FIN TEMPORAL
		
		if (args.length != 4) {
			System.out.println("Usage: java " + AseguradoAutorizadoGanadoXMLParser.class.getName()
					+ " <XML that needs to be transformed>" + " <Output file>" + " <LineaseguroId>" + " <dateFormat>");
			System.exit(1);
		}
		try {
			AseguradoAutorizadoGanadoXMLParser parser = new AseguradoAutorizadoGanadoXMLParser();
			parser.setTagPrincipal(GenericXMLParser.TAG_RG);
			parser.procesarFichero(args[0], args[1], new Long(args[2]), args[3]);
		} catch (FileNotFoundException e) {
			System.out.println("Error al buscar el fichero el fichero de agrupación de asegurados con autorización " + e.getMessage());
			e.printStackTrace();
			System.exit(2);
		} catch (SAXException e) {
			System.out.println("Error al crear el XMLReader " + e.getMessage());
			e.printStackTrace();
			System.exit(3);
		} catch (IOException e) {
			System.out.println("Error de entrada/salida al parsear el fichero de agrupación de asegurados con autorización " + e.getMessage());
			e.printStackTrace();
			System.exit(4);
		} catch (XMLStreamException e) {
			System.out.println("Error al parsear el XML: " + e.getMessage());
			e.printStackTrace();
			System.exit(5);
		} catch (FactoryConfigurationError e) {
			System.out.println("Error al crear el parseador XML: " + e.getMessage());
			e.printStackTrace();
			System.exit(6);
		} catch (Exception e) {
			System.out.println("Error indefinido al parsear el XML: " + e.getMessage());
			e.printStackTrace();
			System.exit(7);
		}
	}
	
	@Override
	protected String generaInsert(Object reg, String dateFormat) {
		AseguradoAutorizadoGanado registro = (AseguradoAutorizadoGanado)reg;
		String sql = "";
		sql += registro.getId().getLineaseguroid() + ";";
		sql += StringUtils.nullToString(registro.getId().getCodmodulo()) + ";";
		sql += StringUtils.nullToString(registro.getNifAsegurado()) + ";";
		sql += StringUtils.nullToString(registro.getCodigoRega()) + ";";
		sql += StringUtils.nullToString(registro.getId().getCodtipocapital()) + ";";
		sql += StringUtils.nullToString(registro.getId().getCodespecie()) + ";";
		sql += StringUtils.nullToString(registro.getId().getCodregimen()) + ";";
		sql += StringUtils.nullToString(registro.getId().getCodgruporaza()) + ";";
		sql += StringUtils.nullToString(registro.getId().getCodtipoanimal()) + ";";
		sql += StringUtils.nullToString(registro.getCodConceptoPpal()) + ";";
		sql += StringUtils.nullToString(registro.getCodRiesgoCbto()) + ";";
		sql += StringUtils.nullToString(registro.getCodGarantizado()) + ";";
		sql += StringUtils.nullToString(registro.getCodAdaptExplot()) + ";";
		sql += StringUtils.nullToString(registro.getNumAnimalesAuto()) + ";";
		
		return sql;
	}

	@Override
	protected Object generaRegistro(Object actual, String tag, XMLStreamReader parser, int id, Long lineaseguroid) {
		
		AseguradoAutorizadoGanado registro;
		AseguradoAutorizadoGanadoId idActual;
		
		if (actual == null){
			registro = new AseguradoAutorizadoGanado();
			idActual = new AseguradoAutorizadoGanadoId();
			registro.setId(idActual);
		}
		else{
			registro = (AseguradoAutorizadoGanado) actual;
			idActual = registro.getId();
		}

		if (this.getTagPrincipal().equals(tag)){
			
			idActual.setLineaseguroid(lineaseguroid);
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "mod")).equals("")){
				idActual.setCodmodulo(StringUtils.nullToString(parser.getAttributeValue(null, "mod")).trim());
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "nif")).equals("")){
				registro.setNifAsegurado(StringUtils.nullToString(parser.getAttributeValue(null, "nif")));
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "codREGA")).equals("")){
				registro.setCodigoRega(StringUtils.nullToString(parser.getAttributeValue(null, "codREGA")));
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "tipCptal")).equals("")){
				idActual.setCodtipocapital(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "tipCptal"))));
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "esp")).equals("")){
				idActual.setCodespecie(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "esp"))));
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "reg")).equals("")){
				idActual.setCodregimen(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "reg"))));
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "grupRaza")).equals("")){
				idActual.setCodgruporaza(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "grupRaza"))));
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "tipAnim")).equals("")){
				idActual.setCodtipoanimal(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "tipAnim"))));
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "numAnimAut")).equals("")){
				registro.setNumAnimalesAuto(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "numAnimAut"))));
			}

		}else if(GenericXMLParser.TAG_GARANTIZADO.equals(tag)){
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "cPMod")).equals("")){
				registro.setCodConceptoPpal(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "cPMod"))));
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "codRCub")).equals("")){
				registro.setCodRiesgoCbto(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "codRCub"))));
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "valor")).equals("")){
				registro.setCodGarantizado(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "valor"))));
			}

		}else if(GenericXMLParser.TAG_ADAPTACION_RIESGO_EXPLOT.equals(tag)){
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "valor")).equals("")){
				registro.setCodAdaptExplot(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "valor"))));
			}
		}

		registro.setId(idActual);
		
		return registro;
	}
}
package com.rsi.agp.core.executor.gan;
// Generated by T-Systems


import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigDecimal;

import javax.xml.stream.FactoryConfigurationError;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;

import org.xml.sax.SAXException;

import com.rsi.agp.core.executor.GenericXMLParser;
import com.rsi.agp.core.webapp.util.StringUtils;
import com.rsi.agp.dao.tables.cgen.TipoCapital;
import com.rsi.agp.dao.tables.cgen.TipoCapitalConGrupoNegocio;
import com.rsi.agp.dao.tables.commons.Termino;
import com.rsi.agp.dao.tables.commons.TerminoId;
import com.rsi.agp.dao.tables.cpl.Modulo;
import com.rsi.agp.dao.tables.cpl.ModuloId;
import com.rsi.agp.dao.tables.cpl.gan.Especie;
import com.rsi.agp.dao.tables.cpl.gan.EspecieId;
import com.rsi.agp.dao.tables.cpl.gan.GruposRazas;
import com.rsi.agp.dao.tables.cpl.gan.GruposRazasId;
import com.rsi.agp.dao.tables.cpl.gan.MascaraPrecioGanado;
import com.rsi.agp.dao.tables.cpl.gan.MascaraPrecioGanadoId;
import com.rsi.agp.dao.tables.cpl.gan.RegimenManejo;
import com.rsi.agp.dao.tables.cpl.gan.RegimenManejoId;
import com.rsi.agp.dao.tables.cpl.gan.TiposAnimalGanado;
import com.rsi.agp.dao.tables.cpl.gan.TiposAnimalGanadoId;
import com.rsi.agp.dao.tables.org.DiccionarioDatos;

/**
 * Parser tabla 9423: Máscara de Precios de Ganado
 * @author U029823
 *
 */
public class MascaraPrecioGanadoXMLParser extends GenericXMLParser {
	
	public static void main(String[] args){
		
		//TEMPORAL
//		args = new String[4];
//		args[0] = "D:\\borrar\\MascaraPrecios.xml";
//		args[1] = "D:\\borrar\\MascaraPrecios.csv";
//		args[2] = "181";
//		args[3] = "null";
		//FIN TEMPORAL
		
		if (args.length != 4) {
			System.out.println("Usage: java " + MascaraPrecioGanadoXMLParser.class.getName()
					+ " <XML that needs to be transformed>" + " <Output file>" + " <LineaseguroId>" + " <dateFormat>");
			System.exit(1);
		}
		try {
			MascaraPrecioGanadoXMLParser parser = new MascaraPrecioGanadoXMLParser();
			parser.setTagPrincipal(GenericXMLParser.TAG_RG);
			parser.procesarFichero(args[0], args[1], new Long(args[2]), args[3]);
		} catch (FileNotFoundException e) {
			System.out.println("Error al buscar el fichero el fichero de máscara de precios de ganado " + e.getMessage());
			e.printStackTrace();
			System.exit(2);
		} catch (SAXException e) {
			System.out.println("Error al crear el XMLReader " + e.getMessage());
			e.printStackTrace();
			System.exit(3);
		} catch (IOException e) {
			System.out.println("Error de entrada/salida al parsear el fichero de máscara de precios de ganado " + e.getMessage());
			e.printStackTrace();
			System.exit(4);
		} catch (XMLStreamException e) {
			System.out.println("Error al parsear el XML: " + e.getMessage());
			e.printStackTrace();
			System.exit(5);
		} catch (FactoryConfigurationError e) {
			System.out.println("Error al crear el parseador XML: " + e.getMessage());
			e.printStackTrace();
			System.exit(6);
		} catch (Exception e) {
			System.out.println("Error indefinido al parsear el XML: " + e.getMessage());
			e.printStackTrace();
			System.exit(7);
		}
	}
	
	@Override
	protected String generaInsert(Object reg, String dateFormat) {

		MascaraPrecioGanado registro = (MascaraPrecioGanado)reg;
		String sql = "";
		sql += StringUtils.nullToString(registro.getId().getId()) + ";";
		sql += StringUtils.nullToString(registro.getId().getLineaseguroid()) + ";";
		sql += StringUtils.nullToString(registro.getModulo().getId().getCodmodulo()) + ";";
		sql += StringUtils.nullToString(registro.getTipoCapital().getCodtipocapital()) + ";";
		sql += StringUtils.nullToString(registro.getEspecie().getId().getCodespecie()) + ";";
		sql += StringUtils.nullToString(registro.getRegimenManejo().getId().getCodRegimen()) + ";";
		sql += StringUtils.nullToString(registro.getGruposRazas().getId().getCodGrupoRaza()) + ";";
		sql += StringUtils.nullToString(registro.getTiposAnimalGanado().getId().getCodTipoAnimal()) + ";";
		sql += StringUtils.nullToString(registro.getTermino().getId().getCodprovincia()) + ";";
		sql += StringUtils.nullToString(registro.getTermino().getId().getCodcomarca()) + ";";
		sql += StringUtils.nullToString(registro.getTermino().getId().getCodtermino()) + ";";
		sql += StringUtils.nullToString(registro.getTermino().getId().getSubtermino()) + ";";
		
		if(registro.getDiccionarioDatos()!=null){
			sql += StringUtils.nullToString(registro.getDiccionarioDatos().getCodconcepto()) + ";";
		}else{
			sql += ";";
		}
	
		return sql;
	}

	@Override
	protected Object generaRegistro(Object actual, String tag, XMLStreamReader parser, int id, Long lineaseguroid) {

		MascaraPrecioGanado registro;
		
		if (actual == null){
			registro = new MascaraPrecioGanado();
			MascaraPrecioGanadoId registroId = new MascaraPrecioGanadoId();
			registroId.setId(new Long(id));
			registroId.setLineaseguroid(lineaseguroid);
			registro.setId(registroId);
			
			Termino termino = new Termino();
		    TerminoId terminoId = new TerminoId();
		    termino.setId(terminoId);
			registro.setTermino(termino);
		}
		else{
			registro = (MascaraPrecioGanado) actual;
		}
		
		if (this.getTagPrincipal().equals(tag)){

			if (!StringUtils.nullToString(parser.getAttributeValue(null, "mod")).equals("")){
				Modulo modulo = new Modulo();
				ModuloId moduloId = new ModuloId();
				String codModulo = StringUtils.nullToString(parser.getAttributeValue(null, "mod")).trim();
				moduloId.setCodmodulo(codModulo);
				moduloId.setLineaseguroid(lineaseguroid);
				modulo.setId(moduloId);
				registro.setModulo(modulo);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "tipCptal")).equals("")){
				TipoCapitalConGrupoNegocio tipoCapital = new TipoCapitalConGrupoNegocio();
				Long codTipoCapital = new Long(StringUtils.nullToString(parser.getAttributeValue(null, "tipCptal")));
				tipoCapital.setCodtipocapital(codTipoCapital);
				registro.setTipoCapital(tipoCapital);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "esp")).equals("")){
				Especie especie = new Especie();
				EspecieId especieId = new EspecieId();
				Long idEspecie = new Long(StringUtils.nullToString(parser.getAttributeValue(null, "esp")));
				especieId.setCodespecie(idEspecie);
				especie.setId(especieId);
				registro.setEspecie(especie);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "reg")).equals("")){
				RegimenManejo regimenManejo = new RegimenManejo();
				RegimenManejoId idRegimenManejo = new RegimenManejoId();
				Long codRegimenManejo = new Long(StringUtils.nullToString(parser.getAttributeValue(null, "reg")));
				idRegimenManejo.setCodRegimen(codRegimenManejo);
				regimenManejo.setId(idRegimenManejo);
				registro.setRegimenManejo(regimenManejo);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "grupRaza")).equals("")){
				GruposRazas gruposRazas = new GruposRazas();
				GruposRazasId gruposRazasId = new GruposRazasId();
				Long codGruposRazas = new Long(StringUtils.nullToString(parser.getAttributeValue(null, "grupRaza")));
				gruposRazasId.setCodGrupoRaza(codGruposRazas);
				gruposRazas.setId(gruposRazasId);
				registro.setGruposRazas(gruposRazas);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "tipAnim")).equals("")){
				TiposAnimalGanado tipoAnimal = new TiposAnimalGanado();
				TiposAnimalGanadoId tiposAnimalGanadoId = new TiposAnimalGanadoId();
				Long codTipoAnimal = new Long(StringUtils.nullToString(parser.getAttributeValue(null, "tipAnim")));
				tiposAnimalGanadoId.setCodTipoAnimal(codTipoAnimal);
				tipoAnimal.setId(tiposAnimalGanadoId);
				registro.setTiposAnimalGanado(tipoAnimal);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "prov").trim()).equals("")){
				BigDecimal codProvincia = new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "prov")));
				registro.getTermino().getId().setCodprovincia(codProvincia);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "com")).equals("")){
				BigDecimal codComarca = new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "com")));
				registro.getTermino().getId().setCodcomarca(codComarca);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "term")).equals("")){
				BigDecimal codTermino = new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "term")));
				registro.getTermino().getId().setCodtermino(codTermino);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "sterm")).equals("")){
				Character subtermino = new Character(StringUtils.nullToString(parser.getAttributeValue(null, "sterm").trim()).charAt(0));
				registro.getTermino().getId().setSubtermino(subtermino);
			}
			
			//codCpto
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "codCpto")).equals("")){
				DiccionarioDatos dd = registro.getDiccionarioDatos();
				
				if(dd==null){
					dd = new DiccionarioDatos(); 
				}
				dd.setCodconcepto(new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "codCpto"))));
				registro.setDiccionarioDatos(dd);
			}
		}

		return registro;
	}
}
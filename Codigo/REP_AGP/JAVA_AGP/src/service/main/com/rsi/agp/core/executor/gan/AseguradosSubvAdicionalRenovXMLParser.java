package com.rsi.agp.core.executor.gan;
// Generated by T-Systems

import java.io.FileNotFoundException;
import java.io.IOException;

import javax.xml.stream.FactoryConfigurationError;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;

import org.xml.sax.SAXException;

import com.rsi.agp.core.executor.GenericXMLParser;
import com.rsi.agp.core.webapp.util.StringUtils;
import com.rsi.agp.dao.tables.cpl.gan.AseguradosSubvAdicionalRenov;
import com.rsi.agp.dao.tables.cpl.gan.AseguradosSubvAdicionalRenovId;



/**
 * Parser tabla 0434: Asegurados con Subvención Adicional por Renovación de la Contratación
 * @author U029823
 *
 */
public class AseguradosSubvAdicionalRenovXMLParser extends GenericXMLParser {
	
	public static void main(String[] args){
		
		//TEMPORAL
//		args = new String[4];
//		args[0] = "D:\\borrar\\.xml";
//		args[1] = "D:\\borrar\\.csv";
//		args[2] = "181";
//		args[3] = "null";
		//FIN TEMPORAL
		
		if (args.length != 4) {
			System.out.println("Usage: java " + AseguradosSubvAdicionalRenovXMLParser.class.getName()
					+ " <XML that needs to be transformed>" + " <Output file>" + " <LineaseguroId>" + " <dateFormat>");
			System.exit(1);
		}
		try {
			AseguradosSubvAdicionalRenovXMLParser parser = new AseguradosSubvAdicionalRenovXMLParser();
			parser.setTagPrincipal(GenericXMLParser.TAG_RG);
			parser.procesarFichero(args[0], args[1], new Long(args[2]), args[3]);
		} catch (FileNotFoundException e) {
			System.out.println("Error al buscar el fichero el fichero de agrupación de Asegurados con Subvención Adicional " + e.getMessage());
			e.printStackTrace();
			System.exit(2);
		} catch (SAXException e) {
			System.out.println("Error al crear el XMLReader " + e.getMessage());
			e.printStackTrace();
			System.exit(3);
		} catch (IOException e) {
			System.out.println("Error de entrada/salida al parsear el fichero de agrupación de Asegurados con Subvención Adicional " + e.getMessage());
			e.printStackTrace();
			System.exit(4);
		} catch (XMLStreamException e) {
			System.out.println("Error al parsear el XML: " + e.getMessage());
			e.printStackTrace();
			System.exit(5);
		} catch (FactoryConfigurationError e) {
			System.out.println("Error al crear el parseador XML: " + e.getMessage());
			e.printStackTrace();
			System.exit(6);
		} catch (Exception e) {
			System.out.println("Error indefinido al parsear el XML: " + e.getMessage());
			e.printStackTrace();
			System.exit(7);
		}
	}
	
	@Override
	protected String generaInsert(Object reg, String dateFormat) {
		AseguradosSubvAdicionalRenov registro = (AseguradosSubvAdicionalRenov)reg;
		String sql = "";
		sql += registro.getId().getLineaseguroid() + ";";
		sql += StringUtils.nullToString(registro.getId().getCodmodulo()) + ";";
		sql += StringUtils.nullToString(registro.getId().getGrupoNegocio()) + ";";
		sql += StringUtils.nullToString(registro.getId().getNifAsegurado()) + ";";
		sql += StringUtils.nullToString(registro.getCodAnyosContrata()) + ";";

		return sql;
	}

	@Override
	protected Object generaRegistro(Object actual, String tag, XMLStreamReader parser, int id, Long lineaseguroid) {
		AseguradosSubvAdicionalRenov registro;
		if (actual == null){
			registro = new AseguradosSubvAdicionalRenov();
		}
		else{
			registro = (AseguradosSubvAdicionalRenov) actual;
		}

		AseguradosSubvAdicionalRenovId idActual = new AseguradosSubvAdicionalRenovId();
		
		if (this.getTagPrincipal().equals(tag)){
			
			idActual.setLineaseguroid(lineaseguroid);			

			if (!StringUtils.nullToString(parser.getAttributeValue(null, "mod")).equals("")){
				idActual.setCodmodulo(StringUtils.nullToString(parser.getAttributeValue(null, "mod")).trim());
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "grupNeg")).equals("")){
				idActual.setGrupoNegocio(StringUtils.nullToString(parser.getAttributeValue(null, "grupNeg")).charAt(0));
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "nif")).equals("")){
				idActual.setNifAsegurado(StringUtils.nullToString(parser.getAttributeValue(null, "nif")));
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "aCont")).equals("")){
				registro.setCodAnyosContrata(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "aCont"))));
			}
			
			registro.setId(idActual);

		}

		return registro;
	}
}
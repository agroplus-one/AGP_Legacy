package com.rsi.agp.core.executor.gan;
// Generated by T-Systems


import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigDecimal;

import javax.xml.stream.FactoryConfigurationError;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;

import org.xml.sax.SAXException;

import com.rsi.agp.core.executor.GenericXMLParser;
import com.rsi.agp.core.webapp.util.StringUtils;
import com.rsi.agp.dao.tables.cgen.SistemaProduccion;
import com.rsi.agp.dao.tables.cgen.TipoCapital;
import com.rsi.agp.dao.tables.commons.Provincia;
import com.rsi.agp.dao.tables.cpl.Modulo;
import com.rsi.agp.dao.tables.cpl.ModuloId;
import com.rsi.agp.dao.tables.cpl.gan.Especie;
import com.rsi.agp.dao.tables.cpl.gan.EspecieId;
import com.rsi.agp.dao.tables.cpl.gan.GruposRazas;
import com.rsi.agp.dao.tables.cpl.gan.GruposRazasId;
import com.rsi.agp.dao.tables.cpl.gan.RegimenManejo;
import com.rsi.agp.dao.tables.cpl.gan.RegimenManejoId;
import com.rsi.agp.dao.tables.cpl.gan.RelEspeciesTradicional;
import com.rsi.agp.dao.tables.cpl.gan.RelEspeciesTradicionalId;
import com.rsi.agp.dao.tables.cpl.gan.TiposAnimalGanado;
import com.rsi.agp.dao.tables.cpl.gan.TiposAnimalGanadoId;

/**
 * Parser tabla 0439: Relación Especies del Nuevo Sistema Ganado con Especies Seguro Tradicional
 * @author U029823
 *
 */
public class RelEspeciesTradicionalXMLParser extends GenericXMLParser {
	
	public static void main(String[] args){
		
		//TEMPORAL
//		args = new String[4];
//		args[0] = "D:\\borrar\\RelacionEspecieGanadoCrecienteFrenteTradicional.xml";
//		args[1] = "D:\\borrar\\RelacionEspecieGanadoCrecienteFrenteTradicional.csv";
//		args[2] = "181";
//		args[3] = "null";
		//FIN TEMPORAL
		
		if (args.length != 4) {
			System.out.println("Usage: java " + RelEspeciesTradicionalXMLParser.class.getName()
					+ " <XML that needs to be transformed>" + " <Output file>" + " <LineaseguroId>" + " <dateFormat>");
			System.exit(1);
		}
		try {
			RelEspeciesTradicionalXMLParser parser = new RelEspeciesTradicionalXMLParser();
			parser.setTagPrincipal(GenericXMLParser.TAG_RG);
			parser.procesarFichero(args[0], args[1], new Long(args[2]), args[3]);
		} catch (FileNotFoundException e) {
			System.out.println("Error al buscar el fichero el fichero de relación especies tradicional " + e.getMessage());
			e.printStackTrace();
			System.exit(2);
		} catch (SAXException e) {
			System.out.println("Error al crear el XMLReader " + e.getMessage());
			e.printStackTrace();
			System.exit(3);
		} catch (IOException e) {
			System.out.println("Error de entrada/salida al parsear el fichero de relación especies tradicional " + e.getMessage());
			e.printStackTrace();
			System.exit(4);
		} catch (XMLStreamException e) {
			System.out.println("Error al parsear el XML: " + e.getMessage());
			e.printStackTrace();
			System.exit(5);
		} catch (FactoryConfigurationError e) {
			System.out.println("Error al crear el parseador XML: " + e.getMessage());
			e.printStackTrace();
			System.exit(6);
		} catch (Exception e) {
			System.out.println("Error indefinido al parsear el XML: " + e.getMessage());
			e.printStackTrace();
			System.exit(7);
		}
	}
	
	@Override
	protected String generaInsert(Object reg, String dateFormat) {

		RelEspeciesTradicional registro = (RelEspeciesTradicional)reg;
		String sql = "";
		sql += StringUtils.nullToString(registro.getId().getId()) + ";";
		sql += StringUtils.nullToString(registro.getId().getLineaseguroid()) + ";";
		sql += StringUtils.nullToString(registro.getModulo().getId().getCodmodulo()) + ";";
		sql += StringUtils.nullToString(registro.getProvincia().getCodprovincia()) + ";";
		sql += StringUtils.nullToString(registro.getTipoCapital().getCodtipocapital()) + ";";
		sql += StringUtils.nullToString(registro.getEspecie().getId().getCodespecie()) + ";";
		sql += StringUtils.nullToString(registro.getRegimenManejo().getId().getCodRegimen()) + ";";
		sql += StringUtils.nullToString(registro.getGruposRazas().getId().getCodGrupoRaza()) + ";";
		sql += StringUtils.nullToString(registro.getTiposAnimalGanado().getId().getCodTipoAnimal()) + ";";
		sql += StringUtils.nullToString(registro.getCodAlojamiento()) + ";";
		sql += StringUtils.nullToString(registro.getCodDestino()) + ";";
		
		if(registro.getSistemaProduccion()!=null){
			sql += StringUtils.nullToString(registro.getSistemaProduccion().getCodsistemaproduccion()) + ";";
		}else{
			sql += ";";	
		}

		sql += StringUtils.nullToString(registro.getCodPureza()) + ";";
		sql += StringUtils.nullToString(registro.getCodControlOficialLechero()) + ";";
		sql += StringUtils.nullToString(registro.getCodIgpdoGanado()) + ";";
		sql += StringUtils.nullToString(registro.getCodAdaptExplot()) + ";";
		sql += StringUtils.nullToString(registro.getCodAdaptGruporaza()) + ";";
		sql += StringUtils.nullToString(registro.getCodAdaptTipocapital()) + ";";
		sql += StringUtils.nullToString(registro.getCodTipoGanaderia()) + ";";
		sql += StringUtils.nullToString(registro.getDuracionPerProductivo()) + ";";
		sql += StringUtils.nullToString(registro.getNumAnimalesAcumDesde()) + ";";
		sql += StringUtils.nullToString(registro.getNumAnimalesAcumHasta()) + ";";
		sql += StringUtils.nullToString(registro.getCodSistAlmacena()) + ";";
		sql += StringUtils.nullToString(registro.getCodGarantizadoCpm()) + ";";
		sql += StringUtils.nullToString(registro.getCodGarantizadoRc()) + ";";
		sql += StringUtils.nullToString(registro.getValorGarantizado()) + ";";
		sql += StringUtils.nullToString(registro.getCodCalculoIndemCpm()) + ";";
		sql += StringUtils.nullToString(registro.getCodCalculoIndemRc()) + ";";
		sql += StringUtils.nullToString(registro.getValorCalculoIndem()) + ";";
		sql += StringUtils.nullToString(registro.getCodPlanTrad()) + ";";
		sql += StringUtils.nullToString(registro.getCodLineaTrad()) + ";";																									
		sql += StringUtils.nullToString(registro.getCodRegimenTrad()) + ";";
		sql += StringUtils.nullToString(registro.getCodClaseTrad()) + ";";																										
		sql += StringUtils.nullToString(registro.getCodTipoAnimalTrad()) + ";";

		return sql;
	}

	@Override
	protected Object generaRegistro(Object actual, String tag, XMLStreamReader parser, int id, Long lineaseguroid) {

		RelEspeciesTradicional registro;
		
		if (actual == null){
			registro = new RelEspeciesTradicional();
			RelEspeciesTradicionalId relEspeciesTradicionalId = new RelEspeciesTradicionalId();
			relEspeciesTradicionalId.setId(new Long(id));
			relEspeciesTradicionalId.setLineaseguroid(lineaseguroid);
			registro.setId(relEspeciesTradicionalId);
		}
		else{
			registro = (RelEspeciesTradicional) actual;
		}
		
		if (this.getTagPrincipal().equals(tag)){
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "mod")).equals("")){
				Modulo modulo = new Modulo();
				ModuloId moduloId = new ModuloId();
				String codModulo = StringUtils.nullToString(parser.getAttributeValue(null, "mod")).trim();
				moduloId.setCodmodulo(codModulo);
				moduloId.setLineaseguroid(lineaseguroid);
				modulo.setId(moduloId);
				registro.setModulo(modulo);
			}

			if (!StringUtils.nullToString(parser.getAttributeValue(null, "prov").trim()).equals("")){
				Provincia prov = new Provincia();
				BigDecimal codProvincia = new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "prov")));
				prov.setCodprovincia(codProvincia);
				registro.setProvincia(prov);
			}

			if (!StringUtils.nullToString(parser.getAttributeValue(null, "tipCptal")).equals("")){
				TipoCapital tipoCapital = new TipoCapital();
				BigDecimal codTipoCapital = new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "tipCptal")));
				tipoCapital.setCodtipocapital(codTipoCapital);
				registro.setTipoCapital(tipoCapital);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "esp")).equals("")){
				Especie especie = new Especie();
				EspecieId especieId = new EspecieId();
				Long idEspecie = new Long(StringUtils.nullToString(parser.getAttributeValue(null, "esp")));
				especieId.setCodespecie(idEspecie);
				especie.setId(especieId);
				registro.setEspecie(especie);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "reg")).equals("")){
				RegimenManejo regimenManejo = new RegimenManejo();
				RegimenManejoId idRegimenManejo = new RegimenManejoId();
				Long codRegimenManejo = new Long(StringUtils.nullToString(parser.getAttributeValue(null, "reg")));
				idRegimenManejo.setCodRegimen(codRegimenManejo);
				regimenManejo.setId(idRegimenManejo);
				registro.setRegimenManejo(regimenManejo);
			}
			
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "grupRaza")).equals("")){
				GruposRazas gruposRazas = new GruposRazas();
				GruposRazasId gruposRazasId = new GruposRazasId();
				Long codGruposRazas = new Long(StringUtils.nullToString(parser.getAttributeValue(null, "grupRaza")));
				gruposRazasId.setCodGrupoRaza(codGruposRazas);
				gruposRazas.setId(gruposRazasId);
				registro.setGruposRazas(gruposRazas);
			}

			if (!StringUtils.nullToString(parser.getAttributeValue(null, "tipAnim")).equals("")){
				TiposAnimalGanado tipoAnimal = new TiposAnimalGanado();
				TiposAnimalGanadoId tiposAnimalGanadoId = new TiposAnimalGanadoId();
				Long codTipoAnimal = new Long(StringUtils.nullToString(parser.getAttributeValue(null, "tipAnim")));
				tiposAnimalGanadoId.setCodTipoAnimal(codTipoAnimal);
				tipoAnimal.setId(tiposAnimalGanadoId);
				registro.setTiposAnimalGanado(tipoAnimal);
			}
			
			//aloja
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "aloja")).equals("")){
				registro.setCodAlojamiento(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "aloja"))));
			}
			
			//dest
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "dest")).equals("")){
				registro.setCodDestino(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "dest"))));
			}
			
			//sisProd
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "sisProd")).equals("")){
				SistemaProduccion sistemaProduccion = new SistemaProduccion();
				BigDecimal codSistemaProduccion = new BigDecimal(StringUtils.nullToString(parser.getAttributeValue(null, "sisProd")));
				sistemaProduccion.setCodsistemaproduccion(codSistemaProduccion);
				registro.setSistemaProduccion(sistemaProduccion);
			}
			
			//pureza
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "pureza")).equals("")){
				registro.setCodPureza(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "pureza"))));
			}

			//conOfiLec
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "conOfiLec")).equals("")){
				registro.setCodControlOficialLechero(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "conOfiLec"))));
			}
			
			//igpDOGan
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "igpDOGan")).equals("")){
				registro.setCodIgpdoGanado(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "igpDOGan"))));
			}

			//adapRiesExp
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "adapRiesExp")).equals("")){
				registro.setCodAdaptExplot(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "adapRiesExp"))));
			}
			
			//adapRiesGRaz
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "adapRiesGRaz")).equals("")){
				registro.setCodAdaptGruporaza(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "adapRiesGRaz"))));
			}
			
			//adapRiesTCap
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "adapRiesTCap")).equals("")){
				registro.setCodAdaptTipocapital(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "adapRiesTCap"))));
			}

			//tGanad
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "tGanad")).equals("")){
				registro.setCodTipoGanaderia(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "tGanad"))));
			}

			//durPerPro
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "durPerPro")).equals("")){
				registro.setDuracionPerProductivo(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "durPerPro"))));
			}
			
			//nuAniDAcum
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "nuAniDAcum")).equals("")){
				registro.setNumAnimalesAcumDesde(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "nuAniDAcum"))));
			}
			
			//nuAniHAcum
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "nuAniHAcum")).equals("")){
				registro.setNumAnimalesAcumHasta(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "nuAniHAcum"))));
			}
			
			//sisAlm
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "sisAlm")).equals("")){
				registro.setCodSistAlmacena(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "sisAlm"))));
			}
			
		}else if(GenericXMLParser.TAG_GARANTIZADO.equals(tag)){

			//cPMod
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "cPMod")).equals("")){
				registro.setCodGarantizadoCpm(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "cPMod"))));
			}
			
			//codRCub
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "codRCub")).equals("")){
				registro.setCodGarantizadoRc(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "codRCub"))));
			}
			
			//valor
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "valor")).equals("")){
				registro.setValorGarantizado(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "valor"))));
			}
				
		}else if(GenericXMLParser.TAG_CALCULO_INDEMNIZACION.equals(tag)){

			//cPMod
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "cPMod")).equals("")){
				registro.setCodCalculoIndemCpm(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "cPMod"))));
			}
			
			//codRCub
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "codRCub")).equals("")){
				registro.setCodCalculoIndemRc(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "codRCub"))));
			}
			
			//valor
			if (!StringUtils.nullToString(parser.getAttributeValue(null, "valor")).equals("")){
				registro.setValorCalculoIndem(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "valor"))));
			}
			
		}else if(GenericXMLParser.TAG_DATOS_SEGURO_TRADICIONAL.equals(tag)){
				
				//cPMod
				if (!StringUtils.nullToString(parser.getAttributeValue(null, "plan")).equals("")){
					registro.setCodPlanTrad(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "plan"))));
				}
				
				//codRCub
				if (!StringUtils.nullToString(parser.getAttributeValue(null, "linea")).equals("")){
					registro.setCodLineaTrad(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "linea"))));
				}
				
				//valor
				if (!StringUtils.nullToString(parser.getAttributeValue(null, "reg")).equals("")){
					registro.setCodRegimenTrad(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "reg"))));
				}
				
				//cPMod
				if (!StringUtils.nullToString(parser.getAttributeValue(null, "clase")).equals("")){
					registro.setCodClaseTrad(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "clase"))));
				}
				
				//codRCub
				if (!StringUtils.nullToString(parser.getAttributeValue(null, "tipAnim")).equals("")){
					registro.setCodTipoAnimalTrad(new Long(StringUtils.nullToString(parser.getAttributeValue(null, "tipAnim"))));
				}
		}
		
		return registro;
	}
}